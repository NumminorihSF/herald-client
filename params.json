{"name":"Herald-client","tagline":"Client lib for herald server","body":"Client lib for herald server\r\n\r\nInstall with:\r\n\r\n    npm install herald-client\r\n\r\nDependencies:\r\n\r\n    crypt-maker\r\n\r\n\r\n[Documentation by jsDuck. Also in RUS](http://numminorihsf.github.io/herald). \r\n\r\n\r\n# Usage\r\n\r\nSimple example:\r\n\r\n```js\r\n\r\n    var hc = new (require('herald-client'))();\r\n        hc.on('error', function(error){\r\n            console.log('HC error:', error);\r\n        });\r\n    \r\n        setTimeout(function() {\r\n            hc.subscribe(\"channel1\", function (sendedBy, obj) {\r\n                console.error('chan1:', obj);\r\n            });\r\n            hc.subscribe(\"channel2\", function (sendedBy, obj) {\r\n                console.log('chan2:', sendedBy, obj);\r\n            });\r\n    \r\n    \r\n            setTimeout(function () {\r\n                hc.unsubscribe(\"channel1\", function(err){\r\n                    if (err) console.error('Error in unsubscribing', err);\r\n                });\r\n                setInterval(function(){\r\n                    hc.publish('channel1', 'C1: '+Math.random());\r\n                    hc.publish('channel2', 'C2: '+Math.random());\r\n                },10);\r\n            }, 1000);\r\n        }, 1000);\r\n        process.on('SIGINT', function(){\r\n            hc.close();\r\n            process.exit();\r\n        });\r\n        process.on('SIGTERM', function(){\r\n            hc.close();\r\n            process.exit();\r\n        });\r\n        \r\n```\r\n\r\nIn this example hc will try connect to `127.0.0.1:8765`.\r\n\r\n# Methods\r\n\r\n## new HeraldClient([options], [algorithm[, key]])\r\n\r\n`options` is an Object. May be `{}`. Contains properties:\r\n* `.logger` - Logger object - to log inner events\r\n* `.name` - String|Numeric - your application class identified. Default: `Math.floor(Math.random()*1000000)`\r\n* `.uid` - String|Numeric - your application unique identified. \r\nDefault: `name + '_' + Math.floor(Math.random()*1000000)`\r\n* `.messageMaker` - Object. Some module, that make and parse messages. See below. Default: `crypt-maker`\r\n* `.connect` - Object. Options for new.Socket.connect. Default: `{port: 8765}` \r\n \r\nSee [https://nodejs.org/api/net.html#net_net_connect_options_connectionlistener]\r\n(https://nodejs.org/api/net.html#net_net_connect_options_connectionlistener). Default: `{port:8765}`\r\n\r\nIf use `crypt-maker` and if `algorithm && algorithm !== 'no'` and no key passed to constructor - throws error.\r\n\r\n\r\n## hc.connect([options]) \r\n\r\nConnect to server. If options aren't passed, connect with last options.\r\nIf already connected - do nothing.\r\nOptions are:\r\n* `options` {Object} [optional] \r\n\r\nSupports the following properties:\r\n  * `port` {Number} [optional]\r\n  * `host` {String} [optional]\r\n  * `backlog` {Number} [optional]\r\n  * `path` {String} [optional]\r\n  * `exclusive` {Boolean} [optional]\r\n\r\nFor all info about this see: See \r\n[https://nodejs.org/api/net.html#net_net_connect_options_connectionlistener]\r\n(https://nodejs.org/api/net.html#net_net_connect_options_connectionlistener).\r\n\r\n\r\n\r\n## hc.close([callback])\r\n\r\nStops the client and close connect from accepting new connections and keeps existing\r\nconnections.\r\n\r\n* `callback` {Function} [optional]\r\n\r\n\r\n## hc.subscribe(eventName, callback)\r\n\r\nCreate subscribing on server. Then event emitted - call `callback(senderIdentifier, bodyOfMessage)`. \r\nIf error on subscribe `hc` will emit `'error'` event.\r\n\r\n* `eventName` {String} - name of event\r\n* `callback` {Function}\r\n\r\n\r\n## hc.unsubscribe(eventName[, callback])\r\n\r\nUnsubscribe from event with name. If no `callback` and error on unsubscribe `hc` will emit `'error'` event.\r\n\r\n* `eventName` {String} - name of event\r\n* `callback` {Function} [optional]\r\n\r\n\r\n## hc.publish(eventName, body[, callback])\r\n\r\nPublish event on server. If no `callback` and error on publish `hc` will emit `'error'` event.\r\n\r\n* `whom` {String} - application name to send.\r\n* `eventName` {String} - name of event\r\n* `eventBody` {String | Object} - body of event\r\n* `callback` {Function} [optional]\r\n\r\n\r\n\r\n## hc.whisper(whom, body[, header]) removed\r\n\r\n\r\n\r\n## hc.whisp(whom, eventName, eventBody, callback)\r\n\r\nSend event message to one application with name. \r\n(Will send to one instance, but not for all application with name).\r\n\r\n* `whom` {String} - application name to send.\r\n* `eventName` {String} - name of event\r\n* `eventBody` {String | Object} - body of event\r\n* `callback` {Function}\r\n\r\n\r\n\r\n## hc.whispUid(whomUid, eventName, eventBody, callback)\r\n\r\nSend event message to one application with uid.\r\n\r\n* `whomUid` {String} - application name to send.\r\n* `eventName` {String} - name of event\r\n* `eventBody` {String | Object} - body of event\r\n* `callback` {Function}\r\n\r\n\r\n## hc.rpc(whom, action[, options][, callback])\r\n\r\nTry call procedure on application with name. \r\n(Will send to one instance, but not for all application with name).\r\n\r\n* `whom` {String} - application name to send.\r\n* `action` {Object} - action object, that you want to call at application.\r\n* `action.name` {String} - action name, that you want to call at application.\r\n* `action.args` {Object | String | Number | Array} - arguments for action. `!!action.args` should return true.\r\n* `options` {Object} [optional] Options for rpc. *not ready yet*.\r\n* `callback` {Function} [optional]\r\n\r\n\r\n\r\n## hc.rpcUid(whomUid, action[, options][, callback])\r\n\r\nTry call procedure on application with uid.\r\n\r\n* `whomUid` {String} - application name to send.\r\n* `action` {Object} - action object, that you want to call at application.\r\n* `action.name` {String} - action name, that you want to call at application.\r\n* `action.args` {Object | String | Number | Array} - arguments for action. `!!action.args` should return true.\r\n* `options` {Object} [optional] Options for rpc. *not ready yet*.\r\n* `callback` {Function} [optional]\r\n\r\n\r\n\r\n## hc.write(header, body[, options][, callback])\r\n\r\nSend some message to server. *At now ignored by server*\r\n\r\n* `header` {Object} - header of message to send.\r\n* `body` {Object|string} - body of message yo send.\r\n* `options` {Object} [optional] Options for rpc. *not ready yet*.\r\n* `callback` {Function} [optional]\r\n\r\n\r\n\r\n## hc.addRpcWorker(actionName, callback)\r\n\r\nAdd function to work with rpc calls.\r\n\r\n* `actionName` {String} - action name.\r\n* `callback` {Function} - function to call. See \r\n[doc](http://numminorihsf.github.io/herald/index.html#!/api/HeraldClient-method-remoteProcedure)\r\n\r\nReturns `true` if added or `false` if there was function with such name.\r\n\r\n\r\n## hc.removeRpcWorker(actionName)\r\n\r\nRemove function from work with rpc calls.\r\n\r\n* `actionName` {String} - action name.\r\n\r\nReturns `true` if was such function else returns `false`.\r\n\r\n\r\n\r\n\r\n## hc.unref()\r\n\r\nCalling `unref` on a client will allow the program to exit if this is the only\r\nactive client in the event system. If the server is already `unref`d calling\r\n`unref` again will have no effect.\r\nEvery success `.connect()` create new connection. That's why you should call `unref` again. \r\n\r\n## hc.ref()\r\n\r\nOpposite of `unref`, calling `ref` on a previously `unref`d server will *not*\r\nlet the program exit if it's the only server left (the default behavior). If\r\nthe server is `ref`d calling `ref` again will have no effect.\r\n\r\n\r\n# Events\r\n\r\n## 'ping'\r\n\r\nEmitted when a server send 'ping' event.\r\n\r\n## 'connect'\r\n\r\nEmitted when the socket has been connected to server.\r\n\r\n## 'close'\r\n\r\nEmitted when the socket closes. Note that if connections exist, this\r\nevent is not emitted until all connections are ended.\r\n\r\n## 'error'\r\n\r\n* {Error Object}\r\n\r\nEmitted when an error occurs.  The `'close'` event will be called directly\r\nfollowing this event.\r\n\r\n\r\n\r\n# Message format\r\n\r\nEvery message should has `header` and `body`.\r\nIf there is no `header` or `body` - message will not sent.\r\n\r\n\r\n## Authorize\r\n\r\n**Be careful** by default without any encrypt algorithm any can connect to your server if he know format.\r\n\r\nExample of message to authorize (without encrypt):\r\n\r\n```\r\n    '{\"rpc\":\"herald-server\",\"action\":\"authorize\",\"actionId\":7,\"name\":\"156512\",\r\n    \"uid\":\"156512_86835\",\"messId\":76688,\"retry\":5,\"timeout\":15000}\\r\\n\r\n     {\"args\":{\"wellKnown\":\"pHrAsE\",\"name\":\"156512\",\"uid\":\"156512_86835\",\"rand\":459}}\\r\\n\\r\\n' \r\n```\r\n\r\nIf there is some connection with same uid - will not authorize new connection and close it.\r\n\r\n\r\n\r\n## Message header format\r\n\r\nFields:\r\n* `messId` Number - id of message. Client set it automaticaly.\r\n* `name` String - connection name. Used for whispering and rpc. Client set it to HeraldClient.name.\r\n* `uid` String - connection uid. Used for whispering and rpc. Unique for every connect. Client set it to HeraldClient.uid.\r\n* `retry` Number [optional] - Count of retries of sending this message. If no field - will not retry.\r\n*Now it is ignored by server. Will work soon.*\r\n* `timeout` Number [optional] - Duration in ms to wait answer from client. If no field - will not retry.\r\n*Now it is ignored by server. Will work soon.*\r\n\r\nEvent:\r\n* `whisp` String [optional] - name of connection to send event message.\r\n* `whispUid` String [optional] - uid of connection to send event message.\r\n* `event` String - event name. If no `whisp` or `whispUid` sends to all subscribers.\r\n\r\nRPC:\r\n* `actionId` Number - id of action. Client set it automaticaly.\r\n* `action` String - name of action.\r\n* `rpc` String [optional] - name of connection to send rpc message.\r\n* `rpcUid` String [optional] - uid of connection to send rpc message.\r\n* `rpcRegExp` String|RegExp [optional] - regexp to find connections by name to send rpc message.\r\n\r\n\r\n## Message body format\r\n\r\nBody can by plain string, json, number or something else, except functions.\r\n\r\n## Message examples\r\n\r\nExamples shown without any encryption.\r\n\r\nRPC by client name message:\r\n```js\r\n     '{\"rpc\":\"applicationToCall\",\"action\":\"actionToCall\",\"actionId\":numberActionIdFromSender,\r\n     \"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\r\n         {\"args\":{argsObject}}\\r\\n\\r\\n' \r\n```\r\n\r\nRPC by client UID message:\r\n```js\r\n     '{\"rpcUid\":\"applicationToCall\",\"action\":\"actionToCall\",\"actionId\":numberActionIdFromSender,\r\n     \"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\r\n         {\"args\":{argsObject}}\\r\\n\\r\\n' \r\n```\r\n\r\nWhispering message:\r\n```js\r\n    '{\"whisp\":\"nameOfAppToWhisp\",\"event\":\"someSecretEvent\",\"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\r\n    \"messId\":numberMessageId}\\r\\n\"eventBody\"\\r\\n\\r\\n'\r\n```\r\n\r\nEvent message:\r\n```js\r\n    '{\"event\":\"someEvent\",\"name\":\"nameOfSender\",\"uid\":\"uidOfSender\",\"messId\":numberMessageId}\\r\\n\"eventBody\"\\r\\n\\r\\n'\r\n```\r\n\r\n# LICENSE - \"MIT License\"\r\n\r\nCopyright (c) 2015 Konstantine Petryaev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}